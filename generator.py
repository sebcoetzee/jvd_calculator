import json
import re

low_complexity = """1. 1,00 200 000,00 11 341,85 17,53% 1
2. 200 001,00 650 000,00 46 393,33 16,85% 200 001,00
3. 650 001,00 2 000 000,00 122 193,97 12,43% 650 001,00
4. 2 000 001,00 4 000 000,00 289 927,74 10,83% 2 000 001,00
5. 4 000 001,00 6 500 000,00 506 559,80 10,55% 4 000 001,00
6. 6 500 001,00 13 000 000,00 770 251,28 9,16% 6 500 001,00
7. 13 000 001,00 40 000 000,00 1 365 321,64 8,86% 13 000 001,00
8. 40 000 001,00 130 000 000,00 3 755 421,23 8,85% 40 000 001,00
9. 130 000 001,00 260 000 000,00 11 717 437,86 8,28% 130 000 001,00
10. 260 000 001,00 520 000 000,00 22 475 739,42 8,08% 260 000 001,00
11. 520 000 001,00 1 040 000 000,00 43 501 431,14 7,88% 520 000 001,00
12. 1 040 000 001,00 0,00 84 483 711,59 7,28% 1 040 000 001,00"""

medium_complexity = """1. 1,00 200 000,00 13 570,07 20,96% 1
2. 200 001,00 650 000,00 55 507,74 20,16% 200 001,00
3. 650 001,00 2 000 000,00 146 200,15 14,87% 650 001,00
4. 2 000 001,00 4 000 000,00 346 886,84 12,96% 2 000 001,00
5. 4 000 001,00 6 500 000,00 606 078,35 12,62% 4 000 001,00
6. 6 500 001,00 13 000 000,00 921 574,57 10,95% 6 500 001,00
7. 13 000 001,00 40 000 000,00 1 633 552,23 10,60% 13 000 001,00
8. 40 000 001,00 130 000 000,00 4 493 209,93 10,59% 40 000 001,00
9. 130 000 001,00 260 000 000,00 14 019 441,47 9,91% 130 000 001,00
10. 260 000 001,00 520 000 000,00 26 891 315,09 9,68% 260 000 001,00
11. 520 000 001,00 1 040 000 000,00 52 047 706,61 9,43% 520 000 001,00
12. 1 040 000 001,00 0,00 101 081 351,13 8,71% 1 040 000 001,00"""

high_complexity = """1. 1,00 200 000,00 15 798,28 24,41% 1
2. 200 001,00 650 000,00 64 622,16 23,47% 200 001,00
3. 650 001,00 2 000 000,00 170 206,35 17,31% 650 001,00
4. 2 000 001,00 4 000 000,00 403 845,93 15,09% 2 000 001,00
5. 4 000 001,00 6 500 000,00 705 596,92 14,69% 4 000 001,00
6. 6 500 001,00 13 000 000,00 1 072 897,87 12,76% 6 500 001,00
7. 13 000 001,00 40 000 000,00 1 901 782,84 12,33% 13 000 001,00
8. 40 000 001,00 130 000 000,00 5 230 998,63 12,33% 40 000 001,00
9. 130 000 001,00 260 000 000,00 16 321 445,09 11,52% 130 000 001,00
10. 260 000 001,00 520 000 000,00 31 306 890,75 11,26% 260 000 001,00
11. 520 000 001,00 1 040 000 000,00 60 593 982,10 10,98% 520 000 001,00
12. 1 040 000 001,00 0,00 117 678 990,65 10,16% 1 040 000 001,00"""


def parse_number(number: str) -> float:
    return float(number.replace(" ", "_").replace(",", "."))


def reformat_percentage(percent: str) -> float:
    return round(float(percent.replace(",", ".").replace("%", "")) / 100.0, 4)


line_regex = re.compile(
    r"^\d+\.\s([\d\s]+,\d{2}){1}\s([\d\s]+,\d{2}){1}\s([\d\s]+,\d{2}){1}\s([\d]+,\d{2}%){1}"
)


def parse_line(line: str) -> dict[str, float]:
    match = re.match(line_regex, line)
    if match is None:
        raise RuntimeError(f"No match found on '{line}'")
    return {
        "from": parse_number(match.group(1)),
        "primary_fee": parse_number(match.group(3)),
        "percent": reformat_percentage(match.group(4)),
    }


def parse_text_inputs(inputs: str) -> list[dict[str, float]]:
    return [parse_line(line) for line in inputs.split("\n")]


print(
    json.dumps(
        {
            "low": parse_text_inputs(low_complexity),
            "medium": parse_text_inputs(medium_complexity),
            "high": parse_text_inputs(high_complexity),
        }
    )
)
